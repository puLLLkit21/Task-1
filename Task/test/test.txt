it("CashierHelper should return object", async () => {
expect(typeof CashierHelper === "object").toBe(true)
})
it("CashierHelper should return ok response for valid cashierId", async () => {
invokeStoreService.mockImplementation(()=> {
return {
"status": 200,
"data": {
"status": "200"
}
}
})
let response = await CashierHelper.cashierHelper({},{}, ctx )
expect(response.status).toBe("200")
})
it("CashierHelper should exception invokestoreservice response without data", async () => {
invokeStoreService.mockImplementation(()=> {
return {
"status": 200,
"datap": {
"status": "200"
}
}
})
try {
await CashierHelper.cashierHelper({},{}, ctx )
}
catch(e) {
expect(invokeStoreService).toHaveBeenCalledTimes(1)
}
})
it("CashierHelper should exception invokestoreservice response without data status 400", async () => {
invokeStoreService.mockImplementation(()=> {
return {
"status": 400,
"message": "error dummy"
}
})
try {
await CashierHelper.cashierHelper({},{}, ctx )
}
catch(e) {
expect(invokeStoreService).toHaveBeenCalledTimes(1)
}
})
it("CashierHelper should exception invokestoreservice response for status 400 and error.property", async () => { 
invokeStoreService.mockImplementation(()=> {
return Promise.reject({
status: 400,
property: 'dummy error'
})
})
try {
await CashierHelper.cashierHelper({},{}, ctx )
}
catch(e) {
expect(invokeStoreService).toHaveBeenCalledTimes(1)
}
})
it("CashierHelper should exception invokestoreservice response without data status 500", async () => { 
invokeStoreService.mockImplementation(()=> {
return {
"status": 500,
"message": "error dummy"
}
})
try {
await CashierHelper.cashierHelper({},{}, ctx )
}
catch(e) {
expect(invokeStoreService).toHaveBeenCalledTimes(1)
}
})